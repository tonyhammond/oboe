#

module Oboe

  class OpenURL

    # Class constructor
    # uri - the resolver (with/without querystring)
    # context - the context-object

    def initialize(uri, *context)
    end

########################################################################

  @@registry = 'http://lib-www.lanl.gov/~herbertv/niso'
  @@xsi = 'http://www.w3.org/2001/XMLSchema-instance'

########################################################################

  @@xml_decl = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"

  @@ctxc_head =<<-EOT
<!--
  Oboe/Ruby - OpenURL Based Open Environment

  Author: tony_hammond@harcourt.com
  Date:   June 22, 2002
-->
<context-container xmlns="http://www.niso.org/context-object" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="http://www.niso.org/context-object
    http://lib-www.lanl.gov/~herbertv/niso/context-container.xsd" 
    version="">
  EOT

  @@ctxc_tail = "</context-container>"

  @@ctx_head = "<context-object>"
  @@ctx_tail = "</context-object>"

  def to_xml

    s = ""

    # Run though keys and get descriptor counts for each entity
    @@aEnts.each do |_ent|
      @hArgs.each_key do |key|
        if @@hKeys.has_key?(key)
          ent, desc = key.split(/_/)
          next unless ent == _ent;
          @@hEntN[ent] += 1
        end
      end
    end

    if @hArgs.has_key?('adm_tim')
      @@ctxc_head.sub!(/\>\Z/, " timestamp=\"#{@hArgs['adm_tim']}\"\>")
      @@ctx_head.sub! (/\>\Z/, " timestamp=\"#{@hArgs['adm_tim']}\"\>")
    end
    @@ctxc_head.sub!(/(version="")/, "version=\"#{@hArgs['adm_ver']}\"")
  
    s << "#{@@xml_decl}\n"
    s << "#{@@ctxc_head}\n"
    s << "  #{@@ctx_head}\n"
    s << "  <!--\n  OpenURL v.1.0 Parameters"
    s << " (converted from OpenURL v.0.1)" if @ver == '0.1'
    s << ":\n\n"
    @hArgs.sort.each { |key, vals|
      vals.each { |val| s << "  #{key} = #{val}\n" unless key.empty? } }
    s << "-->\n"

    Entity.entity_types().each do |ent_type|
      next unless @context.entity_type?(ent_type)
      e = @context.get_entity_of_type(ent_type)
      s << "    <#{ent_type}>\n"
      Descriptor.descriptor_types().each do |dsc_type|
        e.get_descriptors_of_type(dsc_type).each do |d|
          case dsc_type
            when Descriptor::ID
           (d.val) 
            when Descriptor::METADATA
            when Descriptor::METADATA_PTR
            when Descriptor::PRIVATE_DATA
          end
        end
      end
    end

        
            vals.each do |val|
              if desc == 'id' or desc == 'reffmt' or desc == 'ptr'
                nam = "#{val}"
                nam.sub!(/(\w+):(.*)/, '\1')
                val.sub!(/(\w+):(.*)/, '\2')
                if @@hNIDs.has_key?(nam)
                  s << "      <#{@@hDesc[desc]} type=\"#{nam}\">"
                  s << "#{val}</#{@@hDesc[desc]}>\n"
                end
              elsif desc == 'valfmt'
                s << "      <#{@@hDesc[desc]}>\n"
                s << "        <ref:#{val} "
                s << "xmlns:ref=\"#{@@registry}/#{val}\"\n"
                s << "            xmlns:xsi=\"#{@@xsi}\"\n"
                s << "            xsi:schemaLocation=\""
                s << "#{@@registry}/#{val}\">\n"
                @hArgs.each_key do |key_fmt|
                  if @@hType.has_key?(key_fmt)
                    s << "          <ref:#{key_fmt}>"
                    s << "#{@hArgs[key_fmt]}</ref:#{key_fmt}>\n"
                  end
                end
                s << "        </ref:#{val}>\n"
                s << "      </#{@@hDesc[desc]}>\n"
              else
                s << "      <#{@@hDesc[desc]}>#{val}</#{@@hDesc[desc]}>\n"
              end
            end
            if @@hEntN[ent] == 0
              s << "    </#{@@hEnts[ent]}>\n" unless ent == 'ctx'
            end
          end
        end
      end
    end
    s << "  #{@@ctx_tail}\n"
    s << "#{@@ctxc_tail}\n"

    return s

  end

  end

########################################################################
