#

module Oboe

  class OpenURL

########################################################################

  # Entity name prefix counts
  @@hEntN = {
    "ctx" => 0,
    "ref" => 0, "req" => 0, "res" => 0,
    "rfe" => 0, "rfr" => 0, "srv" => 0,
  }

  # Processing order for entities
  @@aEnts = [ 'ref', 'rfr', 'rfe', 'req', 'res', 'srv', 'ctx' ]

  # Processing order for descriptors
  @@aDesc = [ 'id', 'valfmt', 'reffmt', 'ptr', 'pid' ]

########################################################################

  def initialize(*args)

    @hArgs = {}
    @hArgs = args[0]

    # Is this in OpenURL v1.0 format?
    if @hArgs.has_key?('adm_ver')
      @ver = "1.0"
    else
      # assume this is in OpenURL 0.1 format
      # and convert to OpenURL 1.0 format
      nKeys = 0; byVal = false
      @hArgs.each do |key, vals|
        if Registry.has_key?(key)
          nKeys += 1
          # byVal = true if @@hKeys_01[key] > 0 
        end
      end
      if nKeys > 0
        @ver = "0.1"
        @hArgs['adm_ver'] = "Z39.00-00"
        @hArgs.each do |key, vals|
          _vals = []
          if key == 'id'
            vals.each do |val|
              nam = "#{val}"
              nam.sub!(/(\w+):(.*)/, '\1')
              val.sub!(/(\w+):(.*)/, '\2')
              if Registry.has_nid?(nam)
                _vals.push("ori:#{nam}:#{val}")
              end
            end
            @hArgs.delete(key); @hArgs['ref_id'] = _vals
          end
          if key == 'sid'
            vals.each do |val|
              _vals.push("ori:dbid:#{val}")
            end
            @hArgs.delete(key); @hArgs['rfr_id'] = _vals
          end
          if key == 'pid'
            @hArgs.delete(key); @hArgs['ref_pid'] = vals
          end
        end
        # If "genre" is sepcified then we need to map that to the
        # by-val format type - otherwise we'll need to infer it
        # from the best match of meta-tags to format type
        @hArgs['ref_valfmt'] = 'jarticle' if byVal
      else
        # exit
      end

    end

    return self

  end

  def to_s

    s = ""
    @hArgs.sort.each do |key, vals|
      vals.each { |val|
      s << "* " if Registry.has_key?(key)
      s << "  #{key} = #{val}\n" unless key.empty? }
    end
    return s

  end

  alias_method :to_xml, :to_s

end

end

########################################################################
